norm=0
bold=1
dim=2
blink=5

cyan="38;5;45"
red="38;5;196"
green=92
yellow=93
orange="38;5;202"

endps="\[\033[0m\]"

files_changed_warning_threshold=(6 4)
battery_warning_threshold=(5 3)

function get_color {
    local ret="\033["
    local pret=$(printf ";%s" $@)

    pret=${pret:1}

    if [[ -z $pret ]]; then
        pret=0
    fi

    echo "\["$ret$pret'm'"\]"
}

function echo_exit {
    local le=$?

    if [ $le -eq 0 ]; then
        echo "$(get_color $norm $green)$le$endps"
    else
        echo "$(get_color $bold $red)$le$endps"
    fi
}

function in_home {
    echo $(pwd | grep -c ^$HOME)
}

function echo_repo_stats {
    local gs
    gs=$(git diff --shortstat 2> /dev/null)

    if [ $? -eq 0 ]; then
        local fch=$(echo $gs | sed -E 's/^([0-9]+) f.+$/\1/')
        local ins=$(echo $gs | sed -E 's/^.+([0-9]+) i.+$/\1/')
        local del=$(echo $gs | sed -E 's/^.+([0-9]+) d.+$/\1/')

        [ $ins ] && ins=" $(get_color $norm $green)+$ins$endps"
        [ $del ] && del=" $(get_color $norm $red)-$del$endps"

        if [ $fch ]; then
            if [ $fch -lt ${files_changed_warning_threshold[1]} ]; then
                fch=" $(get_color $bold $green)~$fch$endps"
            elif [ $fch  -le ${files_changed_warning_threshold[0]} ]; then
                fch=" $(get_color $bold $orange)~$fch$endps"
            else
                fch=" $(get_color $bold $red)~$fch$endps"
            fi
        fi

        local rev=$(git rev-parse --abbrev-ref HEAD)

        if [[ $rev = HEAD ]]; then
            rev="$(get_color $bold $red)detached $(git rev-parse --short HEAD)$endps"
        fi

        echo "[git $rev$fch$ins$del]"

        return
    fi
}

function echo_battery_level {
    echo $@ | perl -pe 's/-InternalBattery-0\s+(\d+)%.+/\1/'
}

function charge_status {
    local chargestate=$(echo $@ | perl -pe 's/-InternalBattery-0\s+\d+%;\s+(.+?);.+/\1/')


}

function echo_charger {
    echo $(echo $batstat | grep ExternalConnected | grep -c Yes)$(echo $batstat | grep FullyCharged | grep -c Yes)
}

function echo_battery_info {
    local btst=$(pmset -g batt | grep Battery-0)
    local bat=$(printf "%.0f" $(echo "$(echo_battery_level $btst) / 10" | bc -l))
    local batstr
    local chst

    case $bat in
        [$((${battery_warning_threshold[0]} + 1))-9]|10)
            batstr=$(get_color $bold $green)
            ;;
        [${battery_warning_threshold[1]}-${battery_warning_threshold[0]}])
            batstr=$(get_color $bold $orange)
            ;;
        [2-${battery_warning_threshold[1]}])
            batstr=$(get_color $bold $red)]
            ;;
        *)
            bat=10
            batstr=$(get_color $blink $red)
            ;;
    esac

    local bch="$(printf "%$(echo $bat)s" | tr " " "●")"

    batstr=$batstr$bch$endps$(get_color $bold)$(printf "%$(echo $((10 - $bat)))s" | tr " " "●")$endps

    case $(echo $btst | perl -pe 's/-InternalBattery-0\s+\d+%;\s+(.+?);.+/\1/') in
        discharging)
            chst=$(get_color $bold $red)
            ;;
        charging)
            chst=$(get_color $bold $orange)
            ;;
        charged)
            chst=$(get_color $bold $green)
            ;;
        'AC attached')
            chst=$(get_color $bold $cyan)
            ;;
    esac

    echo -e $chst'\u2502'$endps$batstr$chst'\u251c'$endps
}

function get_info {
    local mytty=$(basename $(tty))

    local bstr="$(echo_exit) <$(($(history | tail -n 1 | sed -E 's/([0-9]+).+/\1/') + 1))$(get_color $bold)-$endps${mytty#tty}> $(echo_repo_stats)"
    local istripped="$(echo "$bstr" | perl -pe 's/\\\[\\033\[.*?m\\\]//g')"

    echo "\n"$bstr"$(printf "%$(echo $(($(tput cols) - ${#istripped} - 12)))s")"$(echo_battery_info)
}

function preprompt {
    xps1="$(echo "$(get_info)")\n\h:"

    if [ $(in_home) -eq 1 ]; then
        xps1=$xps1"$(get_color $bold $green)[$endps\W$(get_color $bold $green)"
    else
        xps1=$xps1"$(get_color $bold $red)[$endps\W$(get_color $bold $red)"
    fi

    xps1=$xps1"]$endps "

    if [ $(id -u) -ne 0 ]; then
        xps1=$xps1$(get_color $norm $green)'\u'$endps$(get_color $bold $green)'\$'
    else
        xps1=$xps1$(get_color $blink $red)'\u'$endps$(get_color $bold $red)'\$'
    fi

    export PS1=$xps1$endps' '
}

export PROMPT_COMMAND=preprompt
