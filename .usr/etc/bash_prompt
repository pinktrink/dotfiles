#!/usr/bin/env bash
norm=0
bold=1
dim=2
blink=5

lred=91
lgreen=92
lyellow=93
orange="38;5;202"

end="\e[0m"
endps="\[$end\]"

files_changed_warning_threshold=5
battery_warning_threshold=(5 3)

function get_color () {
    ret="\e["

    if [ $1 ]; then
        ret=$ret$1

        if [ $2 ]; then
            ret=$ret';'$2

            if [ $3 ]; then
                ret=$ret';'$3
            fi
        fi
    else
        ret=$ret'0'
    fi

    echo $ret'm'
}

function get_color_ps () {
    echo "\[$(get_color $1 $2 $3)\]"
}

function echo_bad_exit () {
    le=$?

    if [[ $le = 0 ]]; then
        echo "$(get_color $dim $lgreen)$le$end"
    else
        echo "$(get_color $norm $lred)$le$end"
    fi
}

function in_home () {
    echo $(pwd | grep -c ^$HOME)
}

function get_repo_type () {
    if [ "$(is_git_repo)" ]; then
        echo 'git'
    fi
}

function is_git_repo () {
    git status 2> /dev/null
}

function git_get_filechanges () {
    echo "$1" | grep file | sed -E 's/^.+([0-9]+) f.+$/\1/'
}

function git_get_insertions () {
    echo "$1" | grep insertion | sed -E 's/^.+ ([0-9]+) i.+$/\1/'
}

function git_get_deletions () {
    echo "$1" | grep deletion | sed -E 's/^.+ ([0-9]+) d.+$/\1/'
}

function echo_git_stats () {
    if [ "$(is_git_repo)" ]; then
        diffstat="$(git diff --shortstat)"
        fch=$(git_get_filechanges $diffstat)
        ins=$(git_get_insertions $diffstat)
        del=$(git_get_deletions $diffstat)

        [ "$fch" ] || fch=0
        [ "$ins" ] || ins=0
        [ "$del" ] || del=0

        fccolor=$(get_color $bold $lgreen)

        if [[ "$fch" = $files_chaned_warning_threshold ]]; then
            fccolor=$(get_color $bold $lyellow)
        elif [[ "$fch" -gt $files_changed_warning_threshold ]]; then
            fccolor=$(get_color $bold $lred)
        fi

        if [ $(( $fch + $ins + $del )) -ne 0 ]; then
            echo "[$fccolor$fch$end $(get_color $norm $lgreen)+$ins$end $(get_color $norm $lred)-$del$end]"
        else
            echo "[$(get_color $dim $lgreen)0$end]"
        fi
    fi
}

function git_repo_branch () {
    git rev-parse --abbrev-ref HEAD
}

function echo_repo_stats () {
    br=$(git_repo_branch)

    out=''

    if [[ $br = HEAD ]]; then
        out="$(get_color $bold $lred)detached $(git rev-parse --short HEAD)$end"
    fi

    echo $out
}

function echo_battery () {
    batlev="$(ioreg -rc AppleSmartBattery)"
    echo "scale=1; $(echo "$(echo "$batlev" | grep CurrentCapacity | sed -E 's/.+CurrentCapacity.+ ([0-9]+)$/\1/') / $(echo "$batlev" | grep MaxCapacity | sed -E 's/.+MaxCapacity.+ ([0-9]+)$/\1/')" | bc -l) * 10" | bc -l | xargs printf "%1.0f"
}

function echo_ws () {
    printf "%$(echo $1)s"
}

function echo_battery_info () {
    bat=$(echo_battery)

    wsln=$(( $(( $COLUMNS - $1 )) - 12 ))

    blstr=''
    blcolor=''
    bpcolor=$(get_color $bold $orange)

    if [ $bat -ne 0 ]; then
        if [ $bat -gt ${battery_warning_threshold[0]} ]; then
            blcolor=$(get_color $bold $lgreen)
        elif [ $bat -le ${battery_warning_threshold[0]} ] && [ $bat -ge ${battery_warning_threshold[1]} ]; then
            blcolor=$(get_color $bold $orange)
        else
            blcolor=$(get_color $bold $lred)
        fi

        blstr="$blcolor$(printf "%$(echo $bat)s" | tr " " "●")$end$(get_color $bold $dim)$(printf "%$(echo $((10 - $bat)))s" | tr " " "●")$end"
    else
        if [ $bat -eq 0 ]; then
            blstr="$(get_color $bold $blink $lred)$(printf "%10s" | tr " " "●")$end"
        fi
    fi

    batlev="$(ioreg -rc AppleSmartBattery)"

    if [[ -n $(echo "$batlev" | grep ExternalConnected | grep No) ]]; then
        bpcolor=$(get_color $bold $lred)
    fi

    if [[ -n $(echo "$batlev" | grep FullyCharged | grep Yes) ]]; then
        bpcolor=$(get_color $bold $lgreen)
    fi

    bf=$bpcolor'│'$end
    be=$bpcolor'├'$end

    echo "$(echo_ws $wsln)"$bf"$blstr"$be
}

function get_repo_info () {
    case "$(get_repo_type)" in
        "git")
            echo "git $(git_repo_branch) $(echo_git_stats) $(echo_repo_stats)"
        ;;
    esac
}

function get_sys_info () {
    ri=$(echo -e "$(echo_bad_exit) $(get_repo_info)")
    ristripped="$(echo "$ri" | perl -pe 's/\e\[?.*?[\@-~]//g')"

    ln=${#ristripped}

    echo "$ri$(echo_battery_info $ln)"
}

function preprompt () {
    echo -e "\n$(get_sys_info)"

    if [[ $(in_home) = 1 ]]; then
        export PS1="\h:$(get_color_ps $bold $lgreen)[$endps\W$(get_color_ps $bold $lgreen)]$endps "
    else
        export PS1="\h:$(get_color_ps $bold $lred)[$endps\w$(get_color_ps $bold $lred)]$endps "
    fi

    if [[ $(id -u) = 0 ]]; then
        export PS1=$PS1$(get_color_ps $blink $lred)'\u'$endps$(get_color_ps $bold $lred)'\$'$endps' '
    else
        export PS1=$PS1$(get_color_ps $norm $lgreen)'\u'$endps$(get_color_ps $bold $lgreen)'\$'$endps' '
    fi
}

export PROMPT_COMMAND=preprompt
